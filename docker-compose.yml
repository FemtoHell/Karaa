services:
  # MongoDB Database
  mongodb:
    image: mongo:7
    container_name: resume-builder-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: resume_builder
    volumes:
      - mongodb_data:/data/db
    networks:
      - resume-builder-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/resume_builder --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: resume-builder-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resume-builder-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: resume-builder-backend
    restart: unless-stopped
    ports:
      - "5001:5001"
    environment:
      NODE_ENV: production
      PORT: 5001
      API_VERSION: v1
      MONGODB_URI: ${MONGODB_URI}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_USERNAME: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_DB: ${REDIS_DB}
      JWT_SECRET: ${JWT_SECRET:-your_super_secret_jwt_key_change_this_in_production}
      JWT_EXPIRE: 7d
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your_super_secret_refresh_key_change_this}
      JWT_REFRESH_EXPIRE: 30d
      SESSION_SECRET: ${SESSION_SECRET:-your_session_secret_key_change_this}
      COOKIE_EXPIRE: 7
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID:-}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET:-}
      GOOGLE_CALLBACK_URL: ${GOOGLE_CALLBACK_URL:-http://localhost:5000/api/v1/auth/google/callback}
      LINKEDIN_CLIENT_ID: ${LINKEDIN_CLIENT_ID:-}
      LINKEDIN_CLIENT_SECRET: ${LINKEDIN_CLIENT_SECRET:-}
      LINKEDIN_CALLBACK_URL: ${LINKEDIN_CALLBACK_URL:-http://localhost:5000/api/v1/auth/linkedin/callback}
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_EMAIL: ${SMTP_EMAIL:-}
      SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      FROM_EMAIL: ${FROM_EMAIL:-noreply@resumebuilder.com}
      FROM_NAME: ${FROM_NAME:-ResumeBuilder}
      SKIP_EMAIL_VERIFICATION: ${SKIP_EMAIL_VERIFICATION:-false}
      MAX_FILE_SIZE: 5242880
      UPLOAD_PATH: ./uploads
      FRONTEND_URL: http://localhost:3000
      CLIENT_URL: http://localhost:3000
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 100
      CACHE_TTL_SHORT: 300
      CACHE_TTL_MEDIUM: 1800
      CACHE_TTL_LONG: 3600
      ENCRYPTION_SECRET: ${ENCRYPTION_SECRET:-your_encryption_secret_key_change_this}
    volumes:
      - backend_uploads:/app/uploads
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - resume-builder-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5000/api/v1/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL:-http://localhost:5000/api/v1}
    container_name: resume-builder-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - resume-builder-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

networks:
  resume-builder-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  backend_uploads:
    driver: local
